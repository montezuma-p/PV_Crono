# Type stubs for customtkinter
# This eliminates Pylance warnings when customtkinter is not installed

from typing import Any, Optional, Callable, Union
import tkinter as tk

class CTk:
    def __init__(self) -> None: ...
    def title(self, string: str) -> None: ...
    def geometry(self, string: str) -> None: ...
    def grid_columnconfigure(self, column: int, weight: int = 0, **kwargs: Any) -> None: ...
    def grid_rowconfigure(self, row: int, weight: int = 0, **kwargs: Any) -> None: ...
    def protocol(self, name: str, func: Optional[Callable] = None) -> None: ...
    def mainloop(self, n: int = 0) -> None: ...
    def destroy(self) -> None: ...
    def after(self, ms: int, func: Optional[Callable] = None, *args: Any) -> str: ...

class CTkFrame:
    def __init__(self, master: Any = None, **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def grid_columnconfigure(self, column: int, weight: int = 0, **kwargs: Any) -> None: ...
    def grid_rowconfigure(self, row: int, weight: int = 0, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...

class CTkLabel:
    def __init__(self, master: Any = None, text: str = "", **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...
    def cget(self, attribute: str) -> Any: ...

class CTkEntry:
    def __init__(self, master: Any = None, placeholder_text: str = "", **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...
    def get(self) -> str: ...
    def insert(self, index: Union[int, str], string: str) -> None: ...
    def delete(self, first: Union[int, str], last: Optional[Union[int, str]] = None) -> None: ...

class CTkButton:
    def __init__(self, master: Any = None, text: str = "", command: Optional[Callable] = None, **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...

class CTkTextbox:
    def __init__(self, master: Any = None, state: str = "normal", **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...
    def insert(self, index: Union[int, str], chars: str) -> None: ...
    def delete(self, index1: Union[int, str], index2: Optional[Union[int, str]] = None) -> None: ...
    def get(self, index1: Union[int, str], index2: Optional[Union[int, str]] = None) -> str: ...
    def see(self, index: Union[int, str]) -> None: ...

class CTkOptionMenu:
    def __init__(self, master: Any = None, values: list = None, **kwargs: Any) -> None: ...
    def grid(self, **kwargs: Any) -> None: ...
    def pack(self, **kwargs: Any) -> None: ...
    def place(self, **kwargs: Any) -> None: ...
    def configure(self, **kwargs: Any) -> None: ...
    def get(self) -> str: ...
    def set(self, value: str) -> None: ...

class CTkFont:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def set_appearance_mode(mode: str) -> None: ...
def set_default_color_theme(theme: str) -> None: ...
